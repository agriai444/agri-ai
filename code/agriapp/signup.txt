

i am draw  not have  HOME,
  FeedBack,
  Help,
  Share,
  About,
  Invite,
  Testing,

  i have only list item NavigationConversationScreen means every item Conversation is page go to ChatAiChatView


import 'package:agri_ai/app/modules/chat/ai_chat/views/widgets/conv_drawer/chat_drawer.dart';
import 'package:agri_ai/app/modules/chat/ai_chat/views/widgets/navigation_conversation_screen.dart';
import 'package:agri_ai/utils/navigation_home_screen.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:get/get.dart';
import 'package:agri_ai/app/modules/chat/ai_chat/views/widgets/ai_message_bubble.dart';
import 'package:agri_ai/app/modules/chat/ai_chat/views/widgets/custom_input_ai.dart';
import 'package:agri_ai/app/modules/chat/ai_chat/views/widgets/user_message_bubble.dart';
import '../controllers/chat_ai_chat_controller.dart';
import 'widgets/conv_drawer/drawer_chat_controller.dart';

class ChatAiChatView extends GetView<ChatAiChatController> {
  ChatAiChatView({Key? key}) : super(key: key);

  // Initialize the controller
  final ChatAiChatController controller = Get.put(ChatAiChatController());

  BoxDecoration _getDecoration(bool isUser) {
    return BoxDecoration(
      color: const Color.fromARGB(255, 226, 238, 238),
      borderRadius: BorderRadius.only(
        topLeft: isUser ? Radius.circular(8.0.r) : Radius.circular(0.0.r),
        bottomLeft: isUser ? Radius.circular(0.0.r) : Radius.circular(8.0.r),
        bottomRight: isUser ? Radius.circular(0.0.r) : Radius.circular(8.0.r),
        topRight: isUser ? Radius.circular(9.0.r) : Radius.circular(0.0.r),
      ),
      boxShadow: <BoxShadow>[
        BoxShadow(
          color: Colors.transparent,
          offset: Offset(1.1, 1.1),
          blurRadius: 10.0.r,
        ),
      ],
    );
  }


  Widget? screenView;
  DrawerIndex? drawerIndex;

  @override
  void initState() {
    drawerIndex = DrawerIndex.HOME;
    screenView =  ChatAiChatView();
    super.initState();
  }
  void changeIndex(DrawerIndex drawerIndexdata) {
    if (drawerIndex != drawerIndexdata) {
      drawerIndex = drawerIndexdata;
      switch (drawerIndex) {
        case DrawerIndex.HOME:
          setState(() {
            screenView =  ChatAiChatView();
          });
          break;
        case DrawerIndex.Help:
          setState(() {
            screenView = ChatAiChatView();
          });
          break;
        case DrawerIndex.FeedBack:
          setState(() {
            screenView = ChatAiChatView();
          });
          break;
        case DrawerIndex.Invite:
          setState(() {
            screenView = ChatAiChatView();
          });
          break;
        default:
          break;
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Chat AI'.tr),
        centerTitle: true,
        leading:
         DrawerChatController(
            screenIndex: drawerIndex,
            drawerWidth: MediaQuery.of(context).size.width * 0.75,
            onDrawerCall: (DrawerIndex drawerIndexdata) {
              changeIndex(drawerIndexdata);
              //callback from drawer for replace screen as user need with passing DrawerIndex(Enum index)
            },
        //  IconButton(
        //   icon: const Icon(Icons.menu),
        //   onPressed: () {
        //     // Navigate to NavigationConversationScreen
        //     Get.to(() => NavigationHomeScreen());
        //   },
        // ),
        actions: [
          IconButton(
            icon: const Icon(Icons.add),
            onPressed: () {
              // Handle add new message button press
              print('Add new message button pressed');
              // You can open a dialog or navigate to a new screen here
            },
          ),
        ],
      ),
      body: Column(
        children: [
          SizedBox(height: 5.h),
          Expanded(
            child: Obx(() => ListView.builder(
              controller: controller.scrollController,
              itemCount: controller.messages.length,
              itemBuilder: (context, index) {
                final message = controller.messages[index];
                return Column(
                  children: [
                    Container(
                      decoration: _getDecoration(message.isUser),
                      margin: EdgeInsets.symmetric(horizontal: 6.h, vertical: 0.w),
                      padding: EdgeInsets.symmetric(horizontal: 4.h, vertical: 1.w),
                      child: message.isUser
                          ? UserMessageBubble(
                              message: message.content,
                              timestamp: message.timestamp,
                              imageUrls: message.imageUrls ?? [],
                            )
                          : AIMessageBubble(
                              message: message.content,
                              timestamp: message.timestamp,
                              isLoading: message.isLoading ?? false,
                            ),
                    ),
                    if (!message.isUser) SizedBox(height: 10.h),
                  ],
                );
              },
            )),
          ),
          Padding(
            padding: const EdgeInsets.only(
              left: 8.0,
              right: 8.0,
              bottom: 75.0,
            ),
            child: CustomInputField(hintText: 'Ask me anything...'.tr),
          ),
        ],
      ),
    );
  }
}









import 'package:agri_ai/utils/app_theme.dart';
import 'package:flutter/material.dart';

class ChatDrawer extends StatefulWidget {
  const ChatDrawer(
      {Key? key,
      this.screenIndex,
      this.iconAnimationController,
      this.callBackIndex})
      : super(key: key);

  final AnimationController? iconAnimationController;
  final DrawerIndex? screenIndex;
  final Function(DrawerIndex)? callBackIndex;

  @override
  _ChatDrawerState createState() => _ChatDrawerState();
}

class _ChatDrawerState extends State<ChatDrawer> {
  List<DrawerList>? drawerList;
  @override
  void initState() {
    setDrawerListArray();
    super.initState();
  }

  void setDrawerListArray() {
    drawerList = <DrawerList>[
      DrawerList(
        index: DrawerIndex.HOME,
        labelName: 'Home',
        icon: Icon(Icons.home),
      ),
      DrawerList(
        index: DrawerIndex.Help,
        labelName: 'Help',
        isAssetsImage: true,
        imageName: 'assets/images/supportIcon.png',
      ),
      DrawerList(
        index: DrawerIndex.FeedBack,
        labelName: 'FeedBack',
        icon: Icon(Icons.help),
      ),
      DrawerList(
        index: DrawerIndex.Invite,
        labelName: 'Invite Friend',
        icon: Icon(Icons.group),
      ),
      DrawerList(
        index: DrawerIndex.Share,
        labelName: 'Rate the app',
        icon: Icon(Icons.share),
      ),
      DrawerList(
        index: DrawerIndex.About,
        labelName: 'About Us',
        icon: Icon(Icons.info),
      ),
    ];
  }

  @override
  Widget build(BuildContext context) {
    var brightness = MediaQuery.of(context).platformBrightness;
    bool isLightMode = brightness == Brightness.light;
    return Scaffold(
      backgroundColor: AppTheme.notWhite.withOpacity(0.5),
      body: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        mainAxisAlignment: MainAxisAlignment.start,
        children: <Widget>[
          Container(
            width: double.infinity,
            padding: const EdgeInsets.only(top: 40.0),
            child: Container(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisAlignment: MainAxisAlignment.start,
                children: <Widget>[
                  AnimatedBuilder(
                    animation: widget.iconAnimationController!,
                    builder: (BuildContext context, Widget? child) {
                      return ScaleTransition(
                        scale: AlwaysStoppedAnimation<double>(1.0 -
                            (widget.iconAnimationController!.value) * 0.2),
                        child: RotationTransition(
                          turns: AlwaysStoppedAnimation<double>(Tween<double>(
                                      begin: 0.0, end: 24.0)
                                  .animate(CurvedAnimation(
                                      parent: widget.iconAnimationController!,
                                      curve: Curves.fastOutSlowIn))
                                  .value /
                              360),
                          child: Container(
                            height: 120,
                            width: 120,
                            decoration: BoxDecoration(
                              shape: BoxShape.circle,
                              boxShadow: <BoxShadow>[
                                BoxShadow(
                                    color: AppTheme.grey.withOpacity(0.6),
                                    offset: const Offset(2.0, 4.0),
                                    blurRadius: 8),
                              ],
                            ),
                            child: ClipRRect(
                              borderRadius:
                                  const BorderRadius.all(Radius.circular(60.0)),
                              child: Image.asset('assets/images/userImage.png'),
                            ),
                          ),
                        ),
                      );
                    },
                  ),
                  Padding(
                    padding: const EdgeInsets.only(top: 8, left: 4),
                    child: Text(
                      'Chris Hemsworth',
                      style: TextStyle(
                        fontWeight: FontWeight.w600,
                        color: isLightMode ? AppTheme.grey : AppTheme.white,
                        fontSize: 18,
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
          const SizedBox(
            height: 4,
          ),
          Divider(
            height: 1,
            color: AppTheme.grey.withOpacity(0.6),
          ),
          Expanded(
            child: ListView.builder(
              physics: const BouncingScrollPhysics(),
              padding: const EdgeInsets.all(0.0),
              itemCount: drawerList?.length,
              itemBuilder: (BuildContext context, int index) {
                return inkwell(drawerList![index]);
              },
            ),
          ),
          Divider(
            height: 1,
            color: AppTheme.grey.withOpacity(0.6),
          ),
          Column(
            children: <Widget>[
              ListTile(
                title: Text(
                  'Sign Out',
                  style: TextStyle(
                    fontFamily: AppTheme.fontName,
                    fontWeight: FontWeight.w600,
                    fontSize: 16,
                    color: AppTheme.darkText,
                  ),
                  textAlign: TextAlign.left,
                ),
                trailing: Icon(
                  Icons.power_settings_new,
                  color: Colors.red,
                ),
                onTap: () {
                  onTapped();
                },
              ),
              SizedBox(
                height: MediaQuery.of(context).padding.bottom,
              )
            ],
          ),
        ],
      ),
    );
  }

  void onTapped() {
    print('Doing Something...'); // Print to console.
  }

  Widget inkwell(DrawerList listData) {
    return Material(
      color: Colors.transparent,
      child: InkWell(
        splashColor: Colors.grey.withOpacity(0.1),
        highlightColor: Colors.transparent,
        onTap: () {
          navigationtoScreen(listData.index!);
        },
        child: Stack(
          children: <Widget>[
            Container(
              padding: const EdgeInsets.only(top: 8.0, bottom: 8.0),
              child: Row(
                children: <Widget>[
                  Container(
                    width: 6.0,
                    height: 46.0,
                    // decoration: BoxDecoration(
                    //   color: widget.screenIndex == listData.index
                    //       ? Colors.blue
                    //       : Colors.transparent,
                    //   borderRadius: new BorderRadius.only(
                    //     topLeft: Radius.circular(0),
                    //     topRight: Radius.circular(16),
                    //     bottomLeft: Radius.circular(0),
                    //     bottomRight: Radius.circular(16),
                    //   ),
                    // ),
                  ),
                  const Padding(
                    padding: EdgeInsets.all(4.0),
                  ),
                  listData.isAssetsImage
                      ? Container(
                          width: 24,
                          height: 24,
                          child: Image.asset(listData.imageName,
                              color: widget.screenIndex == listData.index
                                  ? Colors.blue
                                  : AppTheme.nearlyBlack),
                        )
                      : Icon(listData.icon?.icon,
                          color: widget.screenIndex == listData.index
                              ? Colors.blue
                              : AppTheme.nearlyBlack),
                  const Padding(
                    padding: EdgeInsets.all(4.0),
                  ),
                  Text(
                    listData.labelName,
                    style: TextStyle(
                      fontWeight: FontWeight.w500,
                      fontSize: 16,
                      color: widget.screenIndex == listData.index
                          ? Colors.black
                          : AppTheme.nearlyBlack,
                    ),
                    textAlign: TextAlign.left,
                  ),
                ],
              ),
            ),
            widget.screenIndex == listData.index
                ? AnimatedBuilder(
                    animation: widget.iconAnimationController!,
                    builder: (BuildContext context, Widget? child) {
                      return Transform(
                        transform: Matrix4.translationValues(
                            (MediaQuery.of(context).size.width * 0.75 - 64) *
                                (1.0 -
                                    widget.iconAnimationController!.value -
                                    1.0),
                            0.0,
                            0.0),
                        child: Padding(
                          padding: EdgeInsets.only(top: 8, bottom: 8),
                          child: Container(
                            width:
                                MediaQuery.of(context).size.width * 0.75 - 64,
                            height: 46,
                            decoration: BoxDecoration(
                              color: Colors.blue.withOpacity(0.2),
                              borderRadius: new BorderRadius.only(
                                topLeft: Radius.circular(0),
                                topRight: Radius.circular(28),
                                bottomLeft: Radius.circular(0),
                                bottomRight: Radius.circular(28),
                              ),
                            ),
                          ),
                        ),
                      );
                    },
                  )
                : const SizedBox()
          ],
        ),
      ),
    );
  }

  Future<void> navigationtoScreen(DrawerIndex indexScreen) async {
    widget.callBackIndex!(indexScreen);
  }
}

enum DrawerIndex {
  HOME,
  FeedBack,
  Help,
  Share,
  About,
  Invite,
  Testing,
}

class DrawerList {
  DrawerList({
    this.isAssetsImage = false,
    this.labelName = '',
    this.icon,
    this.index,
    this.imageName = '',
  });

  String labelName;
  Icon? icon;
  bool isAssetsImage;
  String imageName;
  DrawerIndex? index;
}




import 'package:agri_ai/app/data/providers/chat_ai_provider.dart';
import 'package:agri_ai/app/modules/chat/ai_chat/controllers/chat_ai_chat_controller.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';

import 'item_conversation.dart';

class NavigationConversationScreen extends StatefulWidget {
  @override
  _NavigationConversationScreenState createState() => _NavigationConversationScreenState();
}

class _NavigationConversationScreenState extends State<NavigationConversationScreen> {
  final ChatAiChatController controller = Get.put(ChatAiChatController());
  final ChatAiProvider provider = Get.find<ChatAiProvider>();

  @override
  void initState() {
    super.initState();
    // Call loadConversations when the screen is initialized
    WidgetsBinding.instance.addPostFrameCallback((_) {
      controller.loadConversations();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Conversations'),
        actions: [
          IconButton(
            icon: Icon(Icons.add),
            onPressed: _addNewConversation,
          ),
        ],
      ),
      body: Obx(() {
        if (controller.isLoading.value && controller.conversations.isEmpty) {
          return Center(child: CircularProgressIndicator());
        }
        return Column(
          children: [
            Expanded(
              child: ListView.separated(
                padding: EdgeInsets.all(16.r),
                itemCount: controller.conversations.length,
                separatorBuilder: (context, index) => SizedBox(height: 16.h),
                itemBuilder: (context, index) {
                  return ConversationItem(
                    conversation: controller.conversations[index],
                    onTap: () {
                      Get.toNamed('/chat', arguments: controller.conversations[index]);
                    },
                  );
                },
              ),
            ),
            if (controller.hasMoreConversations.value)
              Padding(
                padding: EdgeInsets.all(16.r),
                child: ElevatedButton(
                  onPressed: controller.isLoadingMore.value
                      ? null
                      : () => controller.loadMoreConversations(),
                  child: controller.isLoadingMore.value
                      ? SizedBox(
                          width: 20.r,
                          height: 20.r,
                          child: CircularProgressIndicator(strokeWidth: 2),
                        )
                      : Text('Load More'),
                ),
              ),
          ],
        );
      }),
    );
  }

  void _addNewConversation() {
    Get.dialog(
      AlertDialog(
        title: Text('New Conversation'),
        content: TextField(
          decoration: InputDecoration(hintText: 'Enter conversation title'),
          onSubmitted: (value) {
            Get.back();
            controller.addNewConversation(value);
          },
        ),
        actions: [
          TextButton(
            child: Text('Cancel'),
            onPressed: () => Get.back(),
          ),
          TextButton(
            child: Text('Create'),
            onPressed: () {
              final title = (Get.find<TextField>().controller?.text ?? '').trim();
              if (title.isNotEmpty) {
                Get.back();
                controller.addNewConversation(title);
              }
            },
          ),
        ],
      ),
    );
  }
}




