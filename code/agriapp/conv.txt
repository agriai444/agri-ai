

in file item_converation.dart  a  make widget  has item converation widget has  border and padding (icon chat with title text )


and make navigation_converation_screen.dart  show loading icon when get data and when finally get data showing with scroller list convertion with space betwwen every element widget above  and in bottom scrooler make button in center called "load more" u can get more data when click show loading icon in button when start processes
 when click menue icon get 


import 'package:get/get.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import '../models/chat_ai_model.dart';

class ChatAiProvider extends GetConnect {
  final supabase = Supabase.instance.client;
  final userId = "37b581d9-3e40-45f5-9456-6aff162cec22";

  @override
  void onInit() {
    httpClient.defaultDecoder = (map) {
      if (map is Map<String, dynamic>) return ChatAi.fromJson(map);
      if (map is List) return map.map((item) => ChatAi.fromJson(item)).toList();
    };
    httpClient.baseUrl = 'YOUR-API-URL';
  }

  Future<List<Conversation>> getConversations( {int page = 1}) async {
    final response = await supabase
        .from('conversations')
        .select()
        .eq('user_id', userId)
        .order('created_at', ascending: false)
        .range((page - 1) * 10, page * 10 - 1);

    return (response as List).map((item) => Conversation.fromJson(item)).toList();
  }

  Future<Conversation?> getConversationById(String conversationId) async {
    final response = await supabase
        .from('conversations')
        .select()
        .eq('id', conversationId)
        .single();

    return response != null ? Conversation.fromJson(response) : null;
  }

  Future<Conversation> addNewConversation(String title) async {
    final response = await supabase
        .from('conversations')
        .insert({
          'user_id': userId,
          'title': title,
        })
        .select()
        .single();

    return Conversation.fromJson(response);
  }

  Future<List<ChatAi>> getListQuestionAnswerByConversationId(String conversationId) async {
    final response = await supabase
        .from('chat_ai')
        .select('*, answers(*)')
        .eq('conversation_id', conversationId)
        .order('created_at');

    return (response as List).map((item) => ChatAi.fromJson(item)).toList();
  }

  Future<ChatAi> addQuestionAnswerByConversationId(String conversationId, String content) async {
    final response = await supabase
        .from('chat_ai')
        .insert({
          'conversation_id': conversationId,
          'user_id': userId,
          'content': content,
        })
        .select()
        .single();

    return ChatAi.fromJson(response);
  }

  // Existing methods...
  Future<ChatAi?> getChatAi(int id) async {
    final response = await get('chatai/$id');
    return response.body;
  }

  Future<Response<ChatAi>> postChatAi(ChatAi chatai) async =>
      await post('chatai', chatai);

  Future<Response> deleteChatAi(int id) async => await delete('chatai/$id');
}

import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:async';
import 'dart:io';

class ChatAiChatController extends GetxController {


}


import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:get/get.dart';
import 'package:agri_ai/app/modules/chat/ai_chat/views/widgets/ai_message_bubble.dart';
import 'package:agri_ai/app/modules/chat/ai_chat/views/widgets/custom_input_ai.dart';
import 'package:agri_ai/app/modules/chat/ai_chat/views/widgets/user_message_bubble.dart';
import '../controllers/chat_ai_chat_controller.dart';

class ChatAiChatView extends GetView<ChatAiChatController> {
  ChatAiChatView({Key? key}) : super(key: key);

  // Initialize the controller
  final ChatAiChatController controller = Get.put(ChatAiChatController());

  BoxDecoration _getDecoration(bool isUser) {
    return BoxDecoration(
      color: const Color.fromARGB(255, 226, 238, 238),
      borderRadius: BorderRadius.only(
        topLeft: isUser ? Radius.circular(8.0.r) : Radius.circular(0.0.r),
        bottomLeft: isUser ? Radius.circular(0.0.r) : Radius.circular(8.0.r),
        bottomRight: isUser ? Radius.circular(0.0.r) : Radius.circular(8.0.r),
        topRight: isUser ? Radius.circular(9.0.r) : Radius.circular(0.0.r),
      ),
      boxShadow: <BoxShadow>[
        BoxShadow(
          color: Colors.transparent,
          offset: Offset(1.1, 1.1),
          blurRadius: 10.0.r,
        ),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Chat AI'.tr),
        centerTitle: true,
        leading: IconButton(
          icon: Icon(Icons.menu),
          onPressed: () {
            // Handle menu button press
         
          },
        ),
        actions: [
          IconButton(
            icon: Icon(Icons.add),
            onPressed: () {
              // Handle add new message button press
              print('Add new message button pressed');
              // You can open a dialog or navigate to a new screen here
            },
          ),
        ],
      ),
      body: Column(
        children: [
          SizedBox(height: 5.h),
          Expanded(
            child: Obx(() => ListView.builder(
              controller: controller.scrollController,
              itemCount: controller.messages.length,
              itemBuilder: (context, index) {
                final message = controller.messages[index];
                return Column(
                  children: [
                    Container(
                      decoration: _getDecoration(message.isUser),
                      margin: EdgeInsets.symmetric(horizontal: 6.h, vertical: 0.w),
                      padding: EdgeInsets.symmetric(horizontal: 4.h, vertical: 1.w),
                      child: message.isUser
                          ? UserMessageBubble(
                              message: message.content,
                              timestamp: message.timestamp,
                              imageUrls: message.imageUrls ?? [],
                            )
                          : AIMessageBubble(
                              message: message.content,
                              timestamp: message.timestamp,
                              isLoading: message.isLoading ?? false,
                            ),
                    ),
                    if (!message.isUser) SizedBox(height: 10.h),
                  ],
                );
              },
            )),
          ),
          Padding(
            padding: const EdgeInsets.only(
              left: 8.0,
              right: 8.0,
              bottom: 75.0,
            ),
            child: CustomInputField(hintText: 'Ask me anything...'.tr),
          ),
        ],
      ),
    );
  }
}
